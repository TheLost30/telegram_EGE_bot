import re

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, ConversationHandler, MessageHandler, filters


def recognize_subject(subject: str, value='text'):
    match value:
        case 'data':
            subject_patterns = {
                'mat': r'–º–∞—Ç(–µ–º–∞—Ç–∏–∫–∞)?',
                'rus': r'—Ä—É—Å(—Å–∫–∏–π\s—è–∑—ã–∫)?',
                'inos': r'(–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|–∫–∏—Ç–∞–π—Å–∫–∏–π|—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∏–π|—è–ø–æ–Ω—Å–∫–∏–π|–Ω–µ–º–µ—Ü–∫–∏–π|–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π)\s?(—è–∑—ã–∫)?',
                'fiz': r'—Ñ–∏–∑(–∏–∫–∞)?',
                'obsh': r'–æ–±—â(–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ)?',
                'him': r'—Ö–∏–º(–∏—è)?',
                'ist': r'–∏—Å—Ç–æ—Ä–∏—è',
                'bio': r'–±–∏–æ–ª(–æ–≥–∏—è)?',
                'inf': r'–∏–Ω—Ñ(–æ—Ä–º–∞—Ç–∏–∫–∞)?',
                'lit': r'–ª–∏—Ç(–µ—Ä–∞—Ç—É—Ä–∞)?',
                'geo': r'–≥–µ–æ–≥—Ä(–∞—Ñ–∏—è)?'
            }
        case 'all':
            subject_patterns = {
                ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'mat']: r'–º–∞—Ç(–µ–º–∞—Ç–∏–∫–∞)?',
                ['–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', 'rus']: r'—Ä—É—Å(—Å–∫–∏–π\s—è–∑—ã–∫)?',
                ['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', 'inos']: r'(–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|–∫–∏—Ç–∞–π—Å–∫–∏–π|—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∏–π|'
                                              r'—è–ø–æ–Ω—Å–∫–∏–π|–Ω–µ–º–µ—Ü–∫–∏–π|–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π)\s?(—è–∑—ã–∫)?',
                ['–§–∏–∑–∏–∫–∞', 'fiz']: r'—Ñ–∏–∑(–∏–∫–∞)?',
                ['–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', 'obsh']: r'–æ–±—â(–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ)?',
                ['–•–∏–º–∏—è', 'him']: r'—Ö–∏–º(–∏—è)?',
                ['–ò—Å—Ç–æ—Ä–∏—è', 'ist']: r'–∏—Å—Ç–æ—Ä–∏—è',
                ['–ë–∏–æ–ª–æ–≥–∏—è', 'bio']: r'–±–∏–æ–ª(–æ–≥–∏—è)?',
                ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', 'inf']: r'–∏–Ω—Ñ(–æ—Ä–º–∞—Ç–∏–∫–∞)?',
                ['–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'lit']: r'–ª–∏—Ç(–µ—Ä–∞—Ç—É—Ä–∞)?',
                ['–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', 'geo']: r'–≥–µ–æ–≥—Ä(–∞—Ñ–∏—è)?'
            }
        case _:
            subject_patterns = {
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': r'–∏–Ω—Ñ(–æ—Ä–º–∞—Ç–∏–∫–∞)?',
                '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': r'–º–∞—Ç(–µ–º–∞—Ç–∏–∫–∞)?',
                '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': r'—Ä—É—Å(—Å–∫–∏–π\s—è–∑—ã–∫)?',
                '–§–∏–∑–∏–∫–∞': r'—Ñ–∏–∑(–∏–∫–∞)?',
                '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': r'–æ–±—â(–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ)?',
                '–•–∏–º–∏—è': r'—Ö–∏–º(–∏—è)?',
                '–ò—Å—Ç–æ—Ä–∏—è': r'–∏—Å—Ç(–æ—Ä–∏—è)?',
                '–ë–∏–æ–ª–æ–≥–∏—è': r'–±–∏–æ(–ª–æ–≥–∏—è)?',
                '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': r'–ª–∏—Ç(–µ—Ä–∞—Ç—É—Ä–∞)?',
                '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': r'–≥–µ–æ(–≥—Ä–∞—Ñ–∏—è)?',
                '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫': r'(–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|–∫–∏—Ç–∞–π—Å–∫–∏–π|—Ñ—Ä–∞–Ω—Ü—É–∑–∫–∏–π|—è–ø–æ–Ω—Å–∫–∏–π|–Ω–µ–º–µ—Ü–∫–∏–π|–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π)?'
            }

    for key, pattern in subject_patterns.items():
        if re.search(pattern, subject, re.IGNORECASE):
            return key

    return None


def declension(number):
    if number % 10 == 1 and number % 100 != 11:
        return '–±–∞–ª–ª'
    elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
        return '–±–∞–ª–ª–∞'
    else:
        return '–±–∞–ª–ª–æ–≤'


async def command(update, context):
    query = update.callback_query
    if query.data == 'get_points':
        if any(context.user_data['points'].values()):
            points = context.user_data['points']
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='ex_points')]])
            await context.bot.editMessageText(text=f'–í–∞—à–∏ –±–∞–ª–ª—ã –ï–ì–≠:\n' +
                                                   '\n'.join(f'{i}: {j} –±–∞–ª–ª–æ–≤'
                                                             for i, j in points.items() if j > 0),
                                              reply_markup=keyboard, chat_id=query.message.chat_id,
                                              message_id=query.message.message_id)
        else:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('–í–≤–µ—Å—Ç–∏', callback_data='set_points')],
                                             [InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='ex_points')]])
            await context.bot.editMessageText(text=f'–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã',
                                              reply_markup=keyboard, chat_id=query.message.chat_id,
                                              message_id=query.message.message_id)
    elif query.data == 'set_points':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚úèÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å', callback_data='all')],
                                         [InlineKeyboardButton('‚ûï–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', callback_data='–º–∞—Ç')],
                                         [InlineKeyboardButton('üåê–Ø–∑—ã–∫', callback_data='None1')],
                                         [InlineKeyboardButton('üá∑üá∫–†—É—Å—Å–∫–∏–π', callback_data='—Ä—É—Å'),
                                          InlineKeyboardButton('üá±üá∑–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π', callback_data='–∞–Ω–≥–ª')],
                                         [InlineKeyboardButton('–î–æ–ø. –ø—Ä–µ–¥–º–µ—Ç—ã', callback_data='None2')],
                                         [InlineKeyboardButton('üí°–§–∏–∑–∏–∫–∞', callback_data='—Ñ–∏–∑'),
                                          InlineKeyboardButton('üñ•–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', callback_data='–∏–Ω—Ñ')],
                                         [InlineKeyboardButton('üß™–•–∏–º–∏—è', callback_data='—Ö–∏–º'),
                                          InlineKeyboardButton('üß¨–ë–∏–æ–ª–æ–≥–∏—è', callback_data='–±–∏–æ–ª')],
                                         [InlineKeyboardButton('üìï–ò—Å—Ç–æ—Ä–∏—è', callback_data='–∏—Å—Ç'),
                                          InlineKeyboardButton('üåç–ì–µ–æ—Ä–≥–∞—Ñ–∏—è', callback_data='–≥–µ–æ')],
                                         [InlineKeyboardButton('üìó–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', callback_data='–æ–±—â'),
                                          InlineKeyboardButton('üìñ–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data='–ª–∏—Ç')],
                                         [InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='ex_points')]])
        await context.bot.editMessageText(text='–ö–∞–∫–∏–µ –±–∞–ª–ª—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                          reply_markup=keyboard, chat_id=query.message.chat_id,
                                          message_id=query.message.message_id)
    elif query.data == 'del_points':
        context.user_data['points'] = {'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 0, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 0,
                               '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫': 0, '–§–∏–∑–∏–∫–∞': 0, '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 0, '–•–∏–º–∏—è': 0,
                               '–ò—Å—Ç–æ—Ä–∏—è': 0, '–ë–∏–æ–ª–æ–≥–∏—è': 0,
                               '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 0, '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 0, '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 0
                               }
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='ex_points')]])
        await context.bot.editMessageText(text='–ë–∞–ª–ª—ã –ï–ì–≠ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã',
                                          reply_markup=keyboard, chat_id=query.message.chat_id,
                                          message_id=query.message.message_id)
    return ConversationHandler.END


async def choose_set_points(update, context):
    query = update.callback_query
    if query.data == 'all':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='set_points')]])
        await context.bot.editMessageText(text='–ù–∞–ø–∏—à–∏—Ç–µ –ë–∞–ª–ª—ã –ï–ì–≠ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç:\n'
                                               '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 10\n'
                                               '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - 15',
                                          reply_markup=keyboard, chat_id=query.message.chat_id,
                                          message_id=query.message.message_id)
        return 'all'
    else:
        subject = recognize_subject(query.data)
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='set_points')]])
        await context.bot.editMessageText(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –ë–∞–ª–ª—ã –ï–ì–≠ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}',
                                          reply_markup=keyboard, chat_id=query.message.chat_id,
                                          message_id=query.message.message_id)
        context.user_data['temp_subject'] = subject
        return 'one'


async def set_one_points(update, context):
    subject = context.user_data['temp_subject']
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='ex_points')]])
    try:
        points = int(update.message.text)
        if not (0 < points <= 100):
            raise ValueError
        context.user_data['points'][subject] = int(update.message.text)
    except ValueError:
        await update.message.reply_text(text='–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100',
                                        reply_markup=keyboard)
        return 'one'

    await update.message.reply_text(text=f'–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —Ç–µ–ø–µ—Ä—å {points} {declension(points)}',
                                    reply_markup=keyboard)
    return ConversationHandler.END


async def set_all_points(update, context):
    sp = {}
    points = update.message.text.split('\n')
    context.user_data['temp_points'] = {}
    for i in points:
        i = i.split('-')
        context.user_data['temp_points'][recognize_subject(i[0])] = int(i[1])

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='start')],
                                     [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='set_points')]])
    await update.message.reply_text(text=f'–£–±–µ–¥–∏—Ç–µ—Å—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã –ï–ì–≠:\n' +
                                         '\n'.join(f'{i}: {j} {declension(int(j))}' for i, j in
                                                   context.user_data['temp_points'].items() if j != 0)
                                         + '\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∫–∞–∂–¥—ã–π –±–∞–ª–ª –æ—Ç–¥–µ–ª—å–Ω–æ.',
                                    reply_markup=keyboard)
    return ConversationHandler.END


def set_point_commands(app):
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(choose_set_points, pattern=re.compile(r'–º–∞—Ç|—Ä—É—Å|–∞–Ω–≥–ª|—Ñ–∏–∑|'
                                                                                 '–æ–±—â|—Ö–∏–º|–∏—Å—Ç|–±–∏–æ–ª|–∏–Ω—Ñ|–ª–∏—Ç|–≥–µ–æ|all')),
                      CallbackQueryHandler(command, pattern=re.compile('get_points|set_points|del_points'))],
        states={
            'all': [MessageHandler(filters.TEXT & ~filters.COMMAND, set_all_points)],
            'one': [MessageHandler(filters.TEXT & ~filters.COMMAND, set_one_points)]
        },
        fallbacks=[CallbackQueryHandler(command, pattern=re.compile('get_points|set_points|del_points'))]
    )
    app.add_handler(conv_handler)
