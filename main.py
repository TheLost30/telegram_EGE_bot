import logging
import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

from data import config as cfg
from data import institution as inst
from data import points


def check_points(user_data):
    if 'points' not in user_data.keys():
        user_data['points'] = {'–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 0, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 0,
                               '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫': 0, '–§–∏–∑–∏–∫–∞': 0, '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 0, '–•–∏–º–∏—è': 0,
                               '–ò—Å—Ç–æ—Ä–∏—è': 0, '–ë–∏–æ–ª–æ–≥–∏—è': 0,
                               '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 0, '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 0, '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 0
                               }
    if 'temp_points' in user_data.keys():
        sp = {i: j for i, j in user_data['points'].items() if i not in user_data['temp_points'].keys()}
        sp = {**sp, **user_data['temp_points']}
        user_data['points'] = sp
    return user_data


async def start(update, context):
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏ –ï–ì–≠", callback_data="ex_points")],
                                     [InlineKeyboardButton("üè´ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π",
                                                           callback_data="find_institution")]])
    context.user_data['points'] = check_points(context.user_data)['points']
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ï–ì–≠", –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –í–£–ó/–∏–Ω—Å—Ç–∏—Ç—É—Ç.'
        f'–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=keyboard)


async def help_buttons(update, context):
    query = update.callback_query
    logging.info(query)
    context.user_data['points'] = check_points(context.user_data)['points']
    keyboard = [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start")]
    if query.data == "ex_points":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="get_points")],
                                         [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="set_points")],
                                         [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="del_points")],
                                         keyboard])
        await context.bot.editMessageText(text='–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–≤–æ–∏–º–∏ –±–∞–ª–ª–∞–º–∏ –ï–ì–≠?',
                                          reply_markup=keyboard, chat_id=query.message.chat_id,
                                          message_id=query.message.message_id)

    elif query.data == "find_institution":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ –±–∞–ª–ª–∞–º –ï–ì–≠", callback_data="inst_points")],
                                         keyboard])
        await context.bot.editMessageText(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π", reply_markup=keyboard,
                                          chat_id=query.message.chat_id, message_id=query.message.message_id)
    elif query.data == "start":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞–º–∏ –ï–ì–≠", callback_data="ex_points")],
                                         [InlineKeyboardButton("üè´ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π",
                                                               callback_data="find_institution")]])
        await context.bot.editMessageText(
            f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ï–ì–≠", –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –í–£–ó/–∏–Ω—Å—Ç–∏—Ç—É—Ç. '
            f'–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=keyboard,
            chat_id=query.message.chat_id, message_id=query.message.message_id)


def main():
    app = Application.builder().token(cfg.token).build()
    points.set_point_commands(app)
    inst.set_institution_commands(app)
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(help_buttons, pattern=re.compile('ex_points|find_institution|start')))

    app.run_polling()


if __name__ == '__main__':
    main()
